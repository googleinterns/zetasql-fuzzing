//
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

import "zetasql/fuzzing/protobuf/parameter_grammar.proto";

package zetasql_expression_grammar;

message Expression {
    oneof expr_oneof {
        LiteralExpr literal = 1;
        CompoundExpr expr = 2;
    }
    required parameter_grammar.Default default_value = 3;
    required bool parenthesized = 4;
    optional parameter_grammar.Whitespace leading_pad = 5;
    optional parameter_grammar.Whitespace trailing_pad = 6;
}

message LiteralExpr {
    enum SpecialValue {
        V_NULL = 0; // variable 'NULL' will be translated to NULL in C, causing failure
    }
    oneof literal_oneof {
        SpecialValue special_literal = 1;
        bool bool_literal = 2;
        string string_literal = 3;
        bytes bytes_literal = 4;
        IntegerLiteral integer_literal = 5;
        NumericLiteral numeric_literal = 6;
    }
    required parameter_grammar.Default default_value = 7;
}

message IntegerLiteral {
    oneof integer_oneof {
        int32 int32_literal = 1;
        uint32 uint32_literal = 2;
        int64 int64_literal = 3;
        uint64 uint64_literal = 4;
    }
    required parameter_grammar.Default default_value = 5;
}

// TODO: Support high precision value representation
message NumericLiteral {
    required bytes value = 1;
}

message CompoundExpr {
    oneof compound_oneof {
        BinaryOperation binary_operation = 1;
    }
    required parameter_grammar.Default default_value = 2;
}

message BinaryOperation {
    enum Operator {
        PLUS = 0;
        MINUS = 1;
        MULTIPLY = 2;
        DIVIDE = 3;
    }
    required Operator op = 1;
    required Expression lhs = 2;
    required Expression rhs = 3;
    required parameter_grammar.Whitespace left_pad = 4;
    required parameter_grammar.Whitespace right_pad = 5;
}